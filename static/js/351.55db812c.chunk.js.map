{"version":3,"file":"static/js/351.55db812c.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import {useState, useEffect} from 'react';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png'\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n\n    let styles = {};\n\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        styles = {objectFit: 'unset'}\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={styles} alt=\"Random character\" className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch(process) {\r\n        case 'waiting': \r\n            return <Spinner/>;\r\n        case 'loading': \r\n            return newItemLoading ? <Component/> : <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component/>;\r\n        case 'error': \r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n    \r\n    const {getAllCharacters, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, []);\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus()\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            const {id, name, thumbnail} = item;\r\n\r\n            let styles = {};\r\n\r\n            if (thumbnail.includes('not_available')) {\r\n                styles = {objectFit: 'unset'}\r\n            } \r\n\r\n            return (         \r\n                <CSSTransition key={id} timeout={300} classNames={'char__item'}>\r\n                    <li className=\"char__item\"\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        tabIndex={0}\r\n                        onClick={() => {\r\n                            props.onCharSelected(id);\r\n                            focusOnItem(i);\r\n                        }}>\r\n                        <img style={styles} src={thumbnail} alt={name}/>\r\n                        <div className=\"char__name\">{name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            );\r\n        })\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {setContent(process, () => renderItems(charList), newItemLoading)}\r\n            <button \r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{'display': charEnded ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n               initialValues={{\r\n                charName: ''\r\n               }}\r\n               validationSchema={Yup.object({charName: Yup.string().required('This field is required')})}\r\n               onSubmit={({charName}) => updateChar(charName)}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'disabled'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { lazy, Suspense, useState } from \"react\";\r\nimport {Helmet} from 'react-helmet';\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nconst CharInfo = lazy(() => import('../charInfo/CharInfo'));\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <Suspense fallback={<Spinner/>}>\r\n                        <ErrorBoundary>\r\n                            <CharInfo charId={selectedChar}/>\r\n                        </ErrorBoundary>\r\n                    </Suspense>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=95e823dab06d3feb6d169326f5cbff85';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n    \r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description || 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url, \r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            title: comics.title,\r\n            price: comics.prices[0].price,\r\n            description: comics.description || 'There is no description.',\r\n            language: comics.textObjects.language || 'en-us',\r\n            pageCount: comics.pageCount ? `${comics.pageCount}.p` : 'No information about the number of pages.'\r\n        }\r\n    }\r\n\r\n    return {getAllCharacters, \r\n            getCharacter, \r\n            getCharacterByName, \r\n            getAllComics, \r\n            getComic,\r\n            clearError, \r\n            process, \r\n            setProcess}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) {\r\n        case 'waiting': \r\n            return <Skeleton/>;\r\n        case 'loading': \r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error': \r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","data","name","description","thumbnail","homepage","wiki","styles","className","href","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","Component","newItemLoading","Spinner","ErrorMessage","Error","props","charList","setCharList","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","renderItems","arr","items","map","item","i","includes","CSSTransition","timeout","classNames","ref","el","current","tabIndex","onCharSelected","forEach","classList","remove","add","focus","focusOnItem","TransitionGroup","component","disabled","ErrorBoundary","state","error","this","setState","children","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","CharInfo","lazy","selectedChar","Helmet","content","Suspense","fallback","charId","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","_baseOffset","res","_transformCharacter","getAllComics","_transformComics","getComic","path","extension","urls","comics","title","price","prices","language","textObjects","pageCount"],"sourceRoot":""}
{"version":3,"file":"static/js/682.553472bb.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n \n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded);\n    }\n\n    const onComicsListLoaded = (newComics) => {\n        let ended = false;\n        if (newComics.length < 8) {\n            ended = true;\n        }\n\n        setComicsList(comicsList => [...comicsList, ...newComics]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 8)\n        setComicsEnded(ended);\n    }\n\n    const renderComics = (arr) => {\n       const items = arr.map((item, i) => {\n            const {id, thumbnail, title, price} = item;\n\n            return (\n                <CSSTransition key={i} timeout={300} classNames={'comics__item'}>\n                    <li className=\"comics__item\" tabIndex={0}>\n                        <Link to={`/marvel-app/comics/${id}`}>\n                            <img src={thumbnail} alt=\"ultimate war\" className=\"comics__item-img\"/>\n                            <div className=\"comics__item-name\">${title}</div>\n                            <div className=\"comics__item-price\">${price}</div>\n                        </Link>\n                    </li>\n                </CSSTransition>\n            )\n       })\n\n       return (\n        <ul className=\"comics__grid\">\n            <TransitionGroup component={null}>\n                {items}\n            </TransitionGroup>\n        </ul>\n       )\n    }   \n\n    let comics = renderComics(comicsList);\n\n    let errorMessage = error ? <ErrorMessage/> : null;\n    let spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {comics}\n            <button \n                disabled={newItemLoading}\n                style={{'display': comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import {Helmet} from 'react-helmet';\r\n\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport ComicsList from '../comicsList/ComicsList';\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with our comics\"\r\n                />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=95e823dab06d3feb6d169326f5cbff85';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n    \r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description || 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url, \r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            title: comics.title,\r\n            price: comics.prices[0].price,\r\n            description: comics.description || 'There is no description.',\r\n            language: comics.textObjects.language || 'en-us',\r\n            pageCount: comics.pageCount ? `${comics.pageCount}.p` : 'No information about the number of pages.'\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, getCharacterByName, getAllComics, getComic ,clearError}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false)\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"names":["className","src","avengers","alt","avengersLogo","style","display","width","height","objectFit","margin","img","useState","comicsList","setComicsList","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicsListLoaded","newComics","ended","length","comics","arr","items","map","item","i","id","thumbnail","title","price","CSSTransition","timeout","classNames","tabIndex","to","TransitionGroup","component","renderComics","errorMessage","ErrorMessage","spinner","Spinner","disabled","onClick","Helmet","name","content","AppBanner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","res","results","_transformCharacter","getCharacter","_transformComics","getComic","getCharacterByName","char","description","path","extension","homepage","urls","wiki","prices","language","textObjects","pageCount"],"sourceRoot":""}
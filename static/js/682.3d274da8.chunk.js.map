{"version":3,"file":"static/js/682.3d274da8.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch(process) {\n        case 'waiting': \n            return <Spinner/>;\n        case 'loading': \n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error': \n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n \n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onComicsListLoaded = (newComics) => {\n        let ended = false;\n        if (newComics.length < 8) {\n            ended = true;\n        }\n\n        setComicsList(comicsList => [...comicsList, ...newComics]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 8)\n        setComicsEnded(ended);\n    }\n\n    const renderItems = (arr) => {\n       const items = arr.map((item, i) => {\n            const {id, thumbnail, title, price} = item;\n\n            return (\n                <CSSTransition key={i} timeout={300} classNames={'comics__item'}>\n                    <li className=\"comics__item\" tabIndex={0}>\n                        <Link to={`/marvel-app/comics/${id}`}>\n                            <img src={thumbnail} alt=\"ultimate war\" className=\"comics__item-img\"/>\n                            <div className=\"comics__item-name\">${title}</div>\n                            <div className=\"comics__item-price\">${price}</div>\n                        </Link>\n                    </li>\n                </CSSTransition>\n            )\n       })\n\n       return (\n        <ul className=\"comics__grid\">\n            <TransitionGroup component={null}>\n                {items}\n            </TransitionGroup>\n        </ul>\n       )\n    }   \n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderItems(comicsList), newItemLoading)}\n            <button \n                disabled={newItemLoading}\n                style={{'display': comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import {Helmet} from 'react-helmet';\r\n\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport ComicsList from '../comicsList/ComicsList';\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with our comics\"\r\n                />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=95e823dab06d3feb6d169326f5cbff85';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n    \r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description || 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url, \r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            title: comics.title,\r\n            price: comics.prices[0].price,\r\n            description: comics.description || 'There is no description.',\r\n            language: comics.textObjects.language || 'en-us',\r\n            pageCount: comics.pageCount ? `${comics.pageCount}.p` : 'No information about the number of pages.'\r\n        }\r\n    }\r\n\r\n    return {getAllCharacters, \r\n            getCharacter, \r\n            getCharacterByName, \r\n            getAllComics, \r\n            getComic,\r\n            clearError, \r\n            process, \r\n            setProcess}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}"],"names":["className","src","avengers","alt","avengersLogo","style","display","width","height","objectFit","margin","img","setContent","process","Component","newItemLoading","Spinner","ErrorMessage","Error","useState","comicsList","setComicsList","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","getAllComics","loading","error","setProcess","useEffect","onRequest","initial","then","onComicsListLoaded","newComics","ended","length","arr","items","map","item","i","id","thumbnail","title","price","CSSTransition","timeout","classNames","tabIndex","to","TransitionGroup","component","renderItems","disabled","onClick","Helmet","name","content","AppBanner","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","data","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","res","results","_transformCharacter","getCharacter","_transformComics","getComic","getCharacterByName","char","description","path","extension","homepage","urls","wiki","comics","prices","language","textObjects","pageCount"],"sourceRoot":""}